/**
 * This class is generated by jOOQ
 */
package io.pturczyk.jooq.domain.tables;


import io.pturczyk.jooq.domain.Keys;
import io.pturczyk.jooq.domain.Publib;
import io.pturczyk.jooq.domain.tables.records.BooksRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Books extends TableImpl<BooksRecord> {

    private static final long serialVersionUID = -1919645275;

    /**
     * The reference instance of <code>publib.books</code>
     */
    public static final Books BOOKS = new Books();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BooksRecord> getRecordType() {
        return BooksRecord.class;
    }

    /**
     * The column <code>publib.books.b_id</code>.
     */
    public final TableField<BooksRecord, Integer> B_ID = createField("b_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('publib.books_b_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>publib.books.b_title</code>.
     */
    public final TableField<BooksRecord, String> B_TITLE = createField("b_title", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

    /**
     * The column <code>publib.books.b_author_id</code>.
     */
    public final TableField<BooksRecord, Integer> B_AUTHOR_ID = createField("b_author_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>publib.books</code> table reference
     */
    public Books() {
        this("books", null);
    }

    /**
     * Create an aliased <code>publib.books</code> table reference
     */
    public Books(String alias) {
        this(alias, BOOKS);
    }

    private Books(String alias, Table<BooksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Books(String alias, Table<BooksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Publib.PUBLIB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BooksRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BOOKS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BooksRecord> getPrimaryKey() {
        return Keys.BOOKS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BooksRecord>> getKeys() {
        return Arrays.<UniqueKey<BooksRecord>>asList(Keys.BOOKS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BooksRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BooksRecord, ?>>asList(Keys.BOOKS__BOOKS_B_AUTHOR_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Books as(String alias) {
        return new Books(alias, this);
    }

    /**
     * Rename this table
     */
    public Books rename(String name) {
        return new Books(name, null);
    }
}
