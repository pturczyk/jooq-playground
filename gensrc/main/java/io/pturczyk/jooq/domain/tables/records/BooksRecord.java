/**
 * This class is generated by jOOQ
 */
package io.pturczyk.jooq.domain.tables.records;


import io.pturczyk.jooq.domain.tables.Books;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BooksRecord extends UpdatableRecordImpl<BooksRecord> implements Record3<Integer, String, Integer> {

    private static final long serialVersionUID = 1885395137;

    /**
     * Setter for <code>publib.books.b_id</code>.
     */
    public void setBId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>publib.books.b_id</code>.
     */
    public Integer getBId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>publib.books.b_title</code>.
     */
    public void setBTitle(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>publib.books.b_title</code>.
     */
    public String getBTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>publib.books.b_author_id</code>.
     */
    public void setBAuthorId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>publib.books.b_author_id</code>.
     */
    public Integer getBAuthorId() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Books.BOOKS.B_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Books.BOOKS.B_TITLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Books.BOOKS.B_AUTHOR_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getBId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getBTitle();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getBAuthorId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BooksRecord value1(Integer value) {
        setBId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BooksRecord value2(String value) {
        setBTitle(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BooksRecord value3(Integer value) {
        setBAuthorId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BooksRecord values(Integer value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BooksRecord
     */
    public BooksRecord() {
        super(Books.BOOKS);
    }

    /**
     * Create a detached, initialised BooksRecord
     */
    public BooksRecord(Integer bId, String bTitle, Integer bAuthorId) {
        super(Books.BOOKS);

        set(0, bId);
        set(1, bTitle);
        set(2, bAuthorId);
    }
}
