/**
 * This class is generated by jOOQ
 */
package io.pturczyk.jooq.domain.tables.records;


import io.pturczyk.jooq.domain.tables.Authors;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorsRecord extends UpdatableRecordImpl<AuthorsRecord> implements Record3<Integer, String, String> {

    private static final long serialVersionUID = -202840226;

    /**
     * Setter for <code>publib.authors.a_id</code>.
     */
    public void setAId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>publib.authors.a_id</code>.
     */
    public Integer getAId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>publib.authors.a_first_name</code>.
     */
    public void setAFirstName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>publib.authors.a_first_name</code>.
     */
    public String getAFirstName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>publib.authors.a_last_name</code>.
     */
    public void setALastName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>publib.authors.a_last_name</code>.
     */
    public String getALastName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Authors.AUTHORS.A_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Authors.AUTHORS.A_FIRST_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Authors.AUTHORS.A_LAST_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getAId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getAFirstName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getALastName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorsRecord value1(Integer value) {
        setAId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorsRecord value2(String value) {
        setAFirstName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorsRecord value3(String value) {
        setALastName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthorsRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthorsRecord
     */
    public AuthorsRecord() {
        super(Authors.AUTHORS);
    }

    /**
     * Create a detached, initialised AuthorsRecord
     */
    public AuthorsRecord(Integer aId, String aFirstName, String aLastName) {
        super(Authors.AUTHORS);

        set(0, aId);
        set(1, aFirstName);
        set(2, aLastName);
    }
}
